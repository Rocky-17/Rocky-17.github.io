<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸽子乐园</title>
  
  <subtitle>咕咕咕咕咕！~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rocky-17.github.io/"/>
  <updated>2019-07-25T02:13:04.000Z</updated>
  <id>https://rocky-17.github.io/</id>
  
  <author>
    <name>Rocky17</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://rocky-17.github.io/2019/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://rocky-17.github.io/2019/10/16/计算机网络/</id>
    <published>2019-10-16T09:35:01.606Z</published>
    <updated>2019-07-25T02:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>《计算机网络（自顶向下方法）》（第七版）读书笔记</p><a id="more"></a><h1 id="第一章-计算机网络和因特网"><a href="#第一章-计算机网络和因特网" class="headerlink" title="第一章 计算机网络和因特网"></a>第一章 计算机网络和因特网</h1><h2 id="什么是因特网"><a href="#什么是因特网" class="headerlink" title="什么是因特网"></a>什么是因特网</h2><h3 id="从因特网的具体构成来描述"><a href="#从因特网的具体构成来描述" class="headerlink" title="从因特网的具体构成来描述"></a>从因特网的具体构成来描述</h3><h4 id="因特网是连接“网络”的“网络”。"><a href="#因特网是连接“网络”的“网络”。" class="headerlink" title="因特网是连接“网络”的“网络”。"></a>因特网是连接“网络”的“网络”。</h4><p>&emsp;&emsp;<strong>因特网的本质就是连接，其价值也在于连接</strong>。ISP(因特网提供商 Internet Service Provider)的互联，让人们可以在网络上共享信息或软硬件资源，极大地方便和丰富了人们的生活。  </p><h4 id="因特网通过诸如TCP-IP、HTTP等协议控制信息的收发"><a href="#因特网通过诸如TCP-IP、HTTP等协议控制信息的收发" class="headerlink" title="因特网通过诸如TCP/IP、HTTP等协议控制信息的收发"></a>因特网通过诸如TCP/IP、HTTP等协议控制信息的收发</h4><p>&emsp;&emsp;<strong>什么是协议？</strong></p><blockquote><p>&emsp;&emsp;协议定义了在两个或多个通信实体之间的交换的报文的格式和顺序，以及报文发送或者接收一条报文或其他事件所采取的动作.  </p></blockquote><p>&emsp;&emsp;协议有三个要素：<br>&emsp;&emsp;语法：用户数据与控制信息的结构与格式，以及数据出现顺序的意义<br>&emsp;&emsp;语义：用于解释比特流的每一部分的意义<br>&emsp;&emsp;时序：事件实现顺序的详细说明</p><h4 id="因特网标准"><a href="#因特网标准" class="headerlink" title="因特网标准"></a>因特网标准</h4><p>&emsp;&emsp;由于协议的重要性（毕竟因特网是通过各种协议来控制信息的收发的），因此让每个人对各个协议的作用有一个共同的认知是必要的，这就需要一个标准。IETF(因特网工程任务组 Internet Engineering Task Force)研发了因特网标准(Internet standard)，所有的因特网标准都是以RFC（请求评论 Request For Comment）的形式在因特网上发布，任何人都可以对其提出意见或者建议。</p><h3 id="服务描述"><a href="#服务描述" class="headerlink" title="服务描述"></a>服务描述</h3><h4 id="分布式应用程序"><a href="#分布式应用程序" class="headerlink" title="分布式应用程序"></a>分布式应用程序</h4><p>&emsp;&emsp;运行在不同端系统上，通过彼此通信实现因特网上各种应用。</p><h4 id="为应用程序提供服务的基础设施"><a href="#为应用程序提供服务的基础设施" class="headerlink" title="为应用程序提供服务的基础设施"></a>为应用程序提供服务的基础设施</h4><p>&emsp;&emsp;1.面向连接的可靠服务。<br>&emsp;&emsp;2.无连接的不可靠服务。</p><h4 id="为应用程序提供编程接口（套接字接口）"><a href="#为应用程序提供编程接口（套接字接口）" class="headerlink" title="为应用程序提供编程接口（套接字接口）"></a>为应用程序提供编程接口（套接字接口）</h4><p>&emsp;&emsp;它规定了运行在一个端系统上的程序请求因特网基础设施向运行在另一个端系统上的特定目的地程序交付数据的方式。（详细在第二章展开）</p><h2 id="互联网结构"><a href="#互联网结构" class="headerlink" title="互联网结构"></a>互联网结构</h2><h3 id="网络边缘（network-edge）"><a href="#网络边缘（network-edge）" class="headerlink" title="网络边缘（network edge）"></a>网络边缘（network edge）</h3><p>&emsp;&emsp;处在网络边缘的就是连接在因特网上的所有主机(host)，主机又被称为端系统(end system)。在互联网边缘，主机之间的通信方式主要分为两类：</p><h4 id="客户——服务器模式-C-S模式"><a href="#客户——服务器模式-C-S模式" class="headerlink" title="客户——服务器模式(C/S模式)"></a>客户——服务器模式(C/S模式)</h4><p>&emsp;&emsp;在C/S模式中，我们将主机分为两类：客户(clients)与服务器(servers)。很简单的，客户就是服务的请求方，而服务器则是服务的提供方。  </p><h4 id="对等连接方式-peer-to-peer-p2p"><a href="#对等连接方式-peer-to-peer-p2p" class="headerlink" title="对等连接方式(peer-to-peer,p2p)"></a>对等连接方式(peer-to-peer,p2p)</h4><p>&emsp;&emsp; p2p方式不再区分客户与服务器，只要主机上安装了相应的p2p软件，就能在主机间相互提供服务。</p><h3 id="接入网与物理媒介"><a href="#接入网与物理媒介" class="headerlink" title="接入网与物理媒介"></a>接入网与物理媒介</h3><p>&emsp;&emsp;将主机接入边缘路由器的方式：</p><h4 id="家庭接入"><a href="#家庭接入" class="headerlink" title="家庭接入"></a>家庭接入</h4><h5 id="DSL（数字专用线）"><a href="#DSL（数字专用线）" class="headerlink" title="DSL（数字专用线）"></a>DSL（数字专用线）</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%AE%A1%E7%BD%91/%E7%AC%AC%E4%B8%80%E7%AB%A0/DSL.png?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;用户的DSL调制解调器通过使用现有的电话线（双绞铜线）与提供本地电话接入的电话公司的本地中心局的DSLAM（数字用户线接入复用器）交换数据来接入网络<br>&emsp;&emsp;上行速率不超过2.5Mbps，一般不超过1Mbps<br>&emsp;&emsp;下行速率不超过24Mbps，一般不超过10Mbps</p><h5 id="电缆"><a href="#电缆" class="headerlink" title="电缆"></a>电缆</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%AE%A1%E7%BD%91/%E7%AC%AC%E4%B8%80%E7%AB%A0/cable.png?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;通过利用现有的有线电视基础设施接入网络，因为应用了光纤和同轴电缆，所以常被称为HFC（混合光纤同轴 Hybrid Fiber Coax）系统。<br>&emsp;&emsp;一个重要特征就是共享广播媒体</p><h5 id="FTTH（光纤到户）"><a href="#FTTH（光纤到户）" class="headerlink" title="FTTH（光纤到户）"></a>FTTH（光纤到户）</h5><p>&emsp;&emsp;AON（主动式光纤网络 Active optical network）<br>&emsp;&emsp;PON（被动式光纤网络 Passive optical network）</p><h5 id="拨号"><a href="#拨号" class="headerlink" title="拨号"></a>拨号</h5><h5 id="卫星"><a href="#卫星" class="headerlink" title="卫星"></a>卫星</h5><h4 id="企业接入"><a href="#企业接入" class="headerlink" title="企业接入"></a>企业接入</h4><h5 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%AE%A1%E7%BD%91/%E7%AC%AC%E4%B8%80%E7%AB%A0/Ethernet.png?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><h5 id="卫星-1"><a href="#卫星-1" class="headerlink" title="卫星"></a>卫星</h5><h4 id="广域网无线接入"><a href="#广域网无线接入" class="headerlink" title="广域网无线接入"></a>广域网无线接入</h4><h5 id="3G-4G"><a href="#3G-4G" class="headerlink" title="3G/4G"></a>3G/4G</h5><h5 id="LTE"><a href="#LTE" class="headerlink" title="LTE"></a>LTE</h5><h4 id="物理媒介"><a href="#物理媒介" class="headerlink" title="物理媒介"></a>物理媒介</h4><h5 id="主机发送数据包流程"><a href="#主机发送数据包流程" class="headerlink" title="主机发送数据包流程"></a>主机发送数据包流程</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《计算机网络（自顶向下方法）》（第七版）读书笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://rocky-17.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="学习笔记" scheme="https://rocky-17.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java框架技术</title>
    <link href="https://rocky-17.github.io/2019/10/16/Java%E6%A1%86%E6%9E%B6/"/>
    <id>https://rocky-17.github.io/2019/10/16/Java框架/</id>
    <published>2019-10-16T09:35:01.590Z</published>
    <updated>2019-10-16T13:42:41.011Z</updated>
    
    <content type="html"><![CDATA[<p>参考书目：《Spring实战》《Spring MVC学习指南》<br>IDE：IDEA</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="面向过程（POP）与面向对象（POP）简述"><a href="#面向过程（POP）与面向对象（POP）简述" class="headerlink" title="面向过程（POP）与面向对象（POP）简述"></a>面向过程（POP）与面向对象（POP）简述</h2><p>&emsp;&emsp;在之前两年的学习过程中，我们学习了C++、Java等一系列的编程语言。了解到了面向过程编程和面向对象编程。以下是Wiki对面向过程和面向对象编程的解释。</p><p><strong>面向过程：</strong></p><blockquote><p>&emsp;&emsp;又称过程式编程、过程化编程，一种编程典范，有时会被视为是指令式编程的同义语。派生自结构化编程（Structured programming），主要采取程序调用（procedure call）或函数调用（function call）的方式来进行流程控制。流程则由包涵一系列运算步骤的程序（Procedures），例程（routines），子程序（subroutines）, 方法（methods），或函数（functions）来控制。在程序运行的任何一个时间点，都可以调用某个特定的程序。任何一个特定的程序，也能被任意一个程序或是它自己本身调用。</p></blockquote><p><strong>面向对象：</strong></p><blockquote><p>&emsp;&emsp;是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象。<strong>面向对象具有三大特性：封装、继承、多态。</strong></p></blockquote><p>&emsp;&emsp;一开始的学习过程中会容易不太容易理解面向过程和面向对象的区别，简单地举一个例子来说明：  </p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">需求：印刷一本书  </span><br><span class="line"></span><br><span class="line">办法：</span><br><span class="line">    -<span class="ruby">雕版印刷（面向过程）：从头到尾顺序刻好每一页的内容，然后印刷</span></span><br><span class="line"><span class="ruby">    -活字印刷（面向对象）：刻好所需用的字块，根据每一页的内容来选取所需要的字块来排列组装成一块板来印刷。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">需求变更：在某一页增删一些内容</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">办法：</span></span><br><span class="line"><span class="ruby">    -雕版印刷（面向过程）：旧的雕版只得作废重新雕刻</span></span><br><span class="line"><span class="ruby">    -活字印刷（面向对象）：根据修改内容来选取所需要的字块来排列组装成一块板来印刷。如果有新添的没有雕刻过的字，再雕刻一份即可。</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由上可以看出面向对象相比于面向过程的开发过程更加的灵活方便，使得代码的维护性、扩展性和复用性均有极大的提升，降低了开发的难度。</p><h2 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h2><h3 id="applet"><a href="#applet" class="headerlink" title="applet"></a>applet</h3><p>&emsp;&emsp;在网页中运行的Java程序称为applet。要使用applet，需要启动Java的Web浏览器执行字节码，而不需要安装任何软件。由于兼容性问题以及安全问题，applet的使用渐渐减少。  </p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>&emsp;&emsp;Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态Web内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考书目：《Spring实战》《Spring MVC学习指南》&lt;br&gt;IDE：IDEA&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://rocky-17.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SpringMVC" scheme="https://rocky-17.github.io/tags/SpringMVC/"/>
    
      <category term="SSM" scheme="https://rocky-17.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Java基础复习</title>
    <link href="https://rocky-17.github.io/2019/10/16/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>https://rocky-17.github.io/2019/10/16/Java基础复习/</id>
    <published>2019-10-16T09:35:01.590Z</published>
    <updated>2019-07-28T10:09:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术 卷一》（第十版）读书笔记</p><a id="more"></a><h1 id="第一章-Java程序设计概述"><a href="#第一章-Java程序设计概述" class="headerlink" title="第一章 Java程序设计概述"></a>第一章 Java程序设计概述</h1><h2 id="Java的特性"><a href="#Java的特性" class="headerlink" title="Java的特性"></a>Java的特性</h2><h3 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h3><p>&emsp;&emsp;Java没有诸如C++一样的头文件、指针、结构、联合、虚基类、操作符重载一类的东西，但是C++的许多特性在Java中仍有应用。</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>&emsp;&emsp;面向对象设计是一种程序设计技术。它将重点放在对象与对象的接口上。Java与C++的主要不同点就在于多重继承，在Java中，取而代之的是更为简单的接口概念。</p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>&emsp;&emsp;Java有一个丰富的例程库，用于处理想HTTP和FTP之类的TCP/IP协议。Java程序能够通过URL打开和访问网络上的对象。</p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>&emsp;&emsp;Java投入了大量的精力进行早期的问题检测，后期动态的（运行时）检测，并消除了容易出错的情况······Java和C++最大的不同在于Java采用的指针模型可以消除重写和损坏数据的可能性。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>&emsp;&emsp;Java适用于网络/分布式环境，在安全方面投入了很大精力，使用Java可以构建防病毒，防篡改的系统。它能够防范诸如运行时堆栈溢出、破坏自己的进程空间之外的内存、未经授权读写文件等攻击。</p><h3 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h3><p>&emsp;&emsp;编译器编译源码生成与特定的计算机体系结构无关的字节码，字节码又可通过任意计算机上的解释器来执行，其还可以动态的翻译为本地机器代码。</p><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><p>&emsp;&emsp;在Java中，数据类型具有固定大小，这消除了代码移植时的主要问题。二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。字符串是标准的Unicode格式存储的。除了与用户界面有关的部分外，所有其他Java库都能很好的支持平台独立性。</p><h3 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h3><p>&emsp;&emsp;Jaca解释器可以在任何移植了解释器的机器上执行Java字节码。</p><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>&emsp;&emsp;字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定CPU的机器码。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>&emsp;&emsp;多线程可以带来更好的交互响应和实时行为，Java是第一个支持并发程序设计的主流语言。</p><h3 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h3><p>&emsp;&emsp;它能够适应不断发展的环境。库中可以自由地添加新方法和实例变量，而对客户端没有任何影响。</p><h2 id="Java-applet-与-Internet"><a href="#Java-applet-与-Internet" class="headerlink" title="Java applet 与 Internet"></a>Java applet 与 Internet</h2><p>&emsp;&emsp;在网页中运行的Java程序称为applet。要使用applet，需要启动Java的Web浏览器执行字节码，而不需要安装任何软件。由于兼容性问题以及安全问题，applet的使用渐渐减少。</p><h2 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h2><table><thead><tr><th align="center">版本</th><th align="center">年份</th><th align="center">语言新特性</th><th align="center">类与接口数量</th></tr></thead><tbody><tr><td align="center">1.0</td><td align="center">1996</td><td align="center">语言本身</td><td align="center">211</td></tr><tr><td align="center">1.1</td><td align="center">1997</td><td align="center">内部类</td><td align="center">477</td></tr><tr><td align="center">1.2</td><td align="center">1998</td><td align="center">strictfp修饰符</td><td align="center">1524</td></tr><tr><td align="center">1.3</td><td align="center">2000</td><td align="center">无</td><td align="center">1840</td></tr><tr><td align="center">1.4</td><td align="center">2002</td><td align="center">断言</td><td align="center">2723</td></tr><tr><td align="center">5.0</td><td align="center">2004</td><td align="center">泛型类、”for each”循环、可变元参数。自动装箱、元数据、枚举、静态导入</td><td align="center">3279</td></tr><tr><td align="center">6</td><td align="center">2006</td><td align="center">无</td><td align="center">3793</td></tr><tr><td align="center">7</td><td align="center">2011</td><td align="center">基于字符串的switch、钻石操作符、二进制字面量、异常处理改进</td><td align="center">4024</td></tr><tr><td align="center">8</td><td align="center">2014</td><td align="center">lambda表达式、包含默认方法的接口、流和日期/时间库</td><td align="center">4240</td></tr></tbody></table><h1 id="第二章-Java程序设计环境"><a href="#第二章-Java程序设计环境" class="headerlink" title="第二章 Java程序设计环境"></a>第二章 Java程序设计环境</h1><table><thead><tr><th align="center">术语名</th><th align="center">缩写</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">Java Development Kit</td><td align="center">JDK</td><td align="center">编写Java程序使用的软件</td></tr><tr><td align="center">Java Runtime Environment</td><td align="center">JRE</td><td align="center">运行Java程序的软件</td></tr><tr><td align="center">Server JRE</td><td align="center">-</td><td align="center">在服务器上运行Java程序的软件</td></tr><tr><td align="center">Standard Edition</td><td align="center">SE</td><td align="center">用于桌面或简单服务器应用的Java平台</td></tr><tr><td align="center">Enterprise Edition</td><td align="center">EE</td><td align="center">用于复杂服务器应用的Java平台</td></tr><tr><td align="center">Micro Edition</td><td align="center">ME</td><td align="center">用于手机或其他小型设备的Java平台</td></tr><tr><td align="center">Java FX</td><td align="center">-</td><td align="center">用于图形化用户界面的一个替代工具包，在Oracle的Java SE的发布版本中提供</td></tr><tr><td align="center">OpenJDK</td><td align="center">-</td><td align="center">Java SE的一个免费开源实现，不包含浏览器集成或Java FX</td></tr><tr><td align="center">Java 2</td><td align="center">J2</td><td align="center">一个过时术语，用于描述1998 ~ 2006年间的Java版本</td></tr><tr><td align="center">Software Development Kit</td><td align="center">SDK</td><td align="center">一个过时的术语，用于描述1998 ~ 2006年间的JDK</td></tr><tr><td align="center">Update</td><td align="center">u</td><td align="center">Oracle术语，表示bug修正版本</td></tr><tr><td align="center">Netbeans</td><td align="center">-</td><td align="center">Oracle的集成开发环境</td></tr></tbody></table><h1 id="第三章-Java的基本程序结构"><a href="#第三章-Java的基本程序结构" class="headerlink" title="第三章 Java的基本程序结构"></a>第三章 Java的基本程序结构</h1><p>一个简单的Java应用程序：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逐行来看一下这段代码的结构</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">HelloWorld</span>&#123;···&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;关键字public 称为访问修饰符，访问修饰符用于控制程序的其他部分对这段代码的访问级别。<br>&emsp;&emsp;关键字class表明这是一个类。<br>&emsp;&emsp;Helloworld是类名 类名的命名规则很宽松，可以任意命名，但必须用字母作为开头，且不能使用Java保留字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;···&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;main方法，Java程序的入口。根据Java语言规范，main方法必须申明为public类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("HelloWorld");</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;程序语句。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注</span></span><br><span class="line"><span class="comment">释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java是一种强类型语言，意味着必须为每一个变量声明一种类型。在Java中有8种基本类型：</p><h3 id="4种整型"><a href="#4种整型" class="headerlink" title="4种整型"></a>4种整型</h3><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1 byte</td><td align="center">-128 ~ 127</td></tr><tr><td align="center">short</td><td align="center">2 bytes</td><td align="center">-32,768 ~ 32,767</td></tr><tr><td align="center">int</td><td align="center">4 bytes</td><td align="center">-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td align="center">long</td><td align="center">8 bytes</td><td align="center">-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td></tr></tbody></table><p>&emsp;&emsp;长整型数值有一个后缀L或l；<br>&emsp;&emsp;十六进制数值有一个前缀0x或0X<br>&emsp;&emsp;八进制有一个前缀0<br>&emsp;&emsp;从Java7开始，加上前缀0b或0B表示二进制数</p><h3 id="2种浮点型"><a href="#2种浮点型" class="headerlink" title="2种浮点型"></a>2种浮点型</h3><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4 bytes</td><td align="center">大约 ±3.402,823,47E+38F（有效位数为6~7位）</td></tr><tr><td align="center">double</td><td align="center">8 bytes</td><td align="center">大约 ±1.797,693,134,862,315,70E+308（有效位数为15位）</td></tr></tbody></table><p>&emsp;&emsp;float类型的数值有一个后缀f或F，没有这个后缀的浮点型数值默认为double类型。<br>&emsp;&emsp;浮点型不适用于无法接受舍入误差的计算（如金融系统）中，应该使用BigDecimal类。  </p><table>    <tr>        <th colspan="3">用于表示溢出和出错情况的三个特殊的浮点数值</th>    </tr>    <tr>        <td>正无穷大</td>        <td>负无穷大</td>        <td>NaN（不是一个数字）</td>    </tr></table><blockquote><p>常量Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY和Double.NaN（以及相应类型的Float类型的常量分别表示这三个特殊的值）</p></blockquote><p>注意：不能这样检测一个特定值是否等于Double.NaN：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x == <span class="type">Double</span>.<span class="keyword">NaN</span>)    // <span class="keyword">is</span> never <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>所有的“非数值”都认为是不相同的，但可以使用Double.isNaN方法检测</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(Double.isNaN(x))    //<span class="built_in"> check </span>whether x is <span class="string">"not a number"</span></span><br></pre></td></tr></table></figure><h3 id="1种字符类型"><a href="#1种字符类型" class="headerlink" title="1种字符类型"></a>1种字符类型</h3><p>&emsp;&emsp;char类型的字面常量要用单引号括起来。<br>&emsp;&emsp;char类型的值可以表示为十六进制，其范围从\u0000到\Uffff。<br>&emsp;&emsp;Unicode转义序列会在解析代码前得到处理。如：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="symbol">\u</span>0022+<span class="symbol">\u</span>0022"</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;并不是一个由””引起来的字符串，而会转义为</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>+<span class="string">""</span>   <span class="comment">//一个空串</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;特别的，要小心注释中的\u。如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \u00A0 is a newline</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中\u00A0会被认为是一个换行符，而不是单纯的注释文字。</p><p>一些特殊的转义序列：</p><table>    <tr>        <td>转义序列</td>        <td>名称</td>        <td>Unicode值</td>    </tr>    <tr>        <td>\b</td>        <td>退格</td>        <td>\u0008</td>    </tr>    <tr>        <td>\t</td>        <td>制表</td>        <td>\u0009</td>    </tr>    <tr>        <td>\n</td>        <td>换行</td>        <td>\u000a</td>    </tr>    <tr>        <td>\r</td>        <td>回车</td>        <td>\u000d</td>    </tr>    <tr>        <td>\"</td>        <td>双引号</td>        <td>\u0022</td>    </tr>    <tr>        <td>\'</td>        <td>单引号</td>        <td>\u0027</td>    </tr>    <tr>        <td>\\</td>        <td>反斜杠</td>        <td>\u005c</td>    </tr></table><h3 id="1种布尔类型"><a href="#1种布尔类型" class="headerlink" title="1种布尔类型"></a>1种布尔类型</h3><p>&emsp;&emsp;boolean类型有两个值，false和true，用来判断逻辑条件。整型和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>&emsp;&emsp;变量名大小写敏感。<br>&emsp;&emsp;不可使用Java保留字作为变量名。<br>&emsp;&emsp;变量的声明应尽可能靠近第一次使用该变量的地方。<br>&emsp;&emsp;变量声明有许多的约定俗成的规范，相关资料可以参考<a href="https://yq.aliyun.com/download/2720?utm_content=m_1000019584" target="_blank" rel="noopener">《阿里巴巴Java开发手册》</a>一类的资料，不再赘述。 </p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>&emsp;&emsp;在Java中，使用关键字final指示常量。关键字final表示这个变量只能被赋值一次，一旦被赋值，便不能再被更改。<br>&emsp;&emsp;习惯上常量名使用全大写。<br>&emsp;&emsp;如果希望某个常量能在一个类中被多个方法使用，那么可以使用static final设置一个类常量。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td></tr><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">/</td><td align="center">除</td></tr><tr><td align="center">%</td><td align="center">取模</td></tr></tbody></table><h3 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/%E5%90%88%E6%B3%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png?raw=true" alt="数据类型之间的合法转换" title>                </div>                <div class="image-caption">数据类型之间的合法转换</div>            </figure><p>&emsp;&emsp;实箭头：无信息丢失的转换。<br>&emsp;&emsp;虚箭头：可能有精度损失的转换。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术 卷一》（第十版）读书笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://rocky-17.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://rocky-17.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>视觉识别入门实例</title>
    <link href="https://rocky-17.github.io/2019/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    <id>https://rocky-17.github.io/2019/10/16/计算机视觉/</id>
    <published>2019-10-16T09:35:01.575Z</published>
    <updated>2019-12-19T13:35:50.274Z</updated>
    
    <content type="html"><![CDATA[<p>自学笔记</p><a id="more"></a><h1 id="相应软件环境安装"><a href="#相应软件环境安装" class="headerlink" title="相应软件环境安装"></a>相应软件环境安装</h1><h2 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h2><p>&emsp;&emsp;Win10有一个很方便的途径安装python：<br>&emsp;&emsp;打开Windows的应用商店，搜索python</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/python/01.png?raw=true" alt="打开Windows的应用商店，搜索python" title>                </div>                <div class="image-caption">打开Windows的应用商店，搜索python</div>            </figure><p>&emsp;&emsp;这里选择3.7版本的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/python/02.png?raw=true" alt="选择3.7版本" title>                </div>                <div class="image-caption">选择3.7版本</div>            </figure>  <p>&emsp;&emsp;安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/python/03.png?raw=true" alt="安装" title>                </div>                <div class="image-caption">安装</div>            </figure>  <p>&emsp;&emsp;打开cmd，输入python -V，显示如下，python3.7.5即已安装完毕</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/Rocky-17/Blog_illustration/blob/master/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/python/04.png?raw=true" alt title>                </div>                <div class="image-caption"></div>            </figure><p>。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自学笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件安装" scheme="https://rocky-17.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
      <category term="视觉识别" scheme="https://rocky-17.github.io/tags/%E8%A7%86%E8%A7%89%E8%AF%86%E5%88%AB/"/>
    
      <category term="Tensorflow" scheme="https://rocky-17.github.io/tags/Tensorflow/"/>
    
  </entry>
  
</feed>
