{"meta":{"title":"鸽子乐园","subtitle":"咕咕咕咕咕！~","description":"随缘写随缘更","author":"Rocky17","url":"https://rocky-17.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-07-14T09:30:53.000Z","updated":"2019-07-14T09:31:25.000Z","comments":false,"path":"categories/index.html","permalink":"https://rocky-17.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-14T09:29:10.000Z","updated":"2019-07-14T09:30:24.000Z","comments":false,"path":"tags/index.html","permalink":"https://rocky-17.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机网络","slug":"计算机网络","date":"2019-10-16T09:35:01.606Z","updated":"2019-07-25T02:13:04.000Z","comments":true,"path":"2019/10/16/计算机网络/","link":"","permalink":"https://rocky-17.github.io/2019/10/16/计算机网络/","excerpt":"《计算机网络（自顶向下方法）》（第七版）读书笔记","text":"《计算机网络（自顶向下方法）》（第七版）读书笔记 第一章 计算机网络和因特网什么是因特网从因特网的具体构成来描述因特网是连接“网络”的“网络”。&emsp;&emsp;因特网的本质就是连接，其价值也在于连接。ISP(因特网提供商 Internet Service Provider)的互联，让人们可以在网络上共享信息或软硬件资源，极大地方便和丰富了人们的生活。 因特网通过诸如TCP/IP、HTTP等协议控制信息的收发&emsp;&emsp;什么是协议？ &emsp;&emsp;协议定义了在两个或多个通信实体之间的交换的报文的格式和顺序，以及报文发送或者接收一条报文或其他事件所采取的动作. &emsp;&emsp;协议有三个要素：&emsp;&emsp;语法：用户数据与控制信息的结构与格式，以及数据出现顺序的意义&emsp;&emsp;语义：用于解释比特流的每一部分的意义&emsp;&emsp;时序：事件实现顺序的详细说明 因特网标准&emsp;&emsp;由于协议的重要性（毕竟因特网是通过各种协议来控制信息的收发的），因此让每个人对各个协议的作用有一个共同的认知是必要的，这就需要一个标准。IETF(因特网工程任务组 Internet Engineering Task Force)研发了因特网标准(Internet standard)，所有的因特网标准都是以RFC（请求评论 Request For Comment）的形式在因特网上发布，任何人都可以对其提出意见或者建议。 服务描述分布式应用程序&emsp;&emsp;运行在不同端系统上，通过彼此通信实现因特网上各种应用。 为应用程序提供服务的基础设施&emsp;&emsp;1.面向连接的可靠服务。&emsp;&emsp;2.无连接的不可靠服务。 为应用程序提供编程接口（套接字接口）&emsp;&emsp;它规定了运行在一个端系统上的程序请求因特网基础设施向运行在另一个端系统上的特定目的地程序交付数据的方式。（详细在第二章展开） 互联网结构网络边缘（network edge）&emsp;&emsp;处在网络边缘的就是连接在因特网上的所有主机(host)，主机又被称为端系统(end system)。在互联网边缘，主机之间的通信方式主要分为两类： 客户——服务器模式(C/S模式)&emsp;&emsp;在C/S模式中，我们将主机分为两类：客户(clients)与服务器(servers)。很简单的，客户就是服务的请求方，而服务器则是服务的提供方。 对等连接方式(peer-to-peer,p2p)&emsp;&emsp; p2p方式不再区分客户与服务器，只要主机上安装了相应的p2p软件，就能在主机间相互提供服务。 接入网与物理媒介&emsp;&emsp;将主机接入边缘路由器的方式： 家庭接入DSL（数字专用线） &emsp;&emsp;用户的DSL调制解调器通过使用现有的电话线（双绞铜线）与提供本地电话接入的电话公司的本地中心局的DSLAM（数字用户线接入复用器）交换数据来接入网络&emsp;&emsp;上行速率不超过2.5Mbps，一般不超过1Mbps&emsp;&emsp;下行速率不超过24Mbps，一般不超过10Mbps 电缆 &emsp;&emsp;通过利用现有的有线电视基础设施接入网络，因为应用了光纤和同轴电缆，所以常被称为HFC（混合光纤同轴 Hybrid Fiber Coax）系统。&emsp;&emsp;一个重要特征就是共享广播媒体 FTTH（光纤到户）&emsp;&emsp;AON（主动式光纤网络 Active optical network）&emsp;&emsp;PON（被动式光纤网络 Passive optical network） 拨号卫星企业接入以太网 卫星广域网无线接入3G/4GLTE物理媒介主机发送数据包流程","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://rocky-17.github.io/tags/学习笔记/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://rocky-17.github.io/tags/计算机网络/"}]},{"title":"Java框架技术","slug":"Java框架","date":"2019-10-16T09:35:01.590Z","updated":"2019-10-16T13:24:32.344Z","comments":true,"path":"2019/10/16/Java框架/","link":"","permalink":"https://rocky-17.github.io/2019/10/16/Java框架/","excerpt":"参考书目：《Spring实战》《Spring MVC学习指南》","text":"参考书目：《Spring实战》《Spring MVC学习指南》 前言面向过程（POP）与面向对象（POP）简述&emsp;&emsp;在之前两年的学习过程中，我们学习了C++、Java等一系列的编程语言。了解到了面向过程编程和面向对象编程。以下是Wiki对面向过程和面向对象编程的解释。 面向过程： &emsp;&emsp;又称过程式编程、过程化编程，一种编程典范，有时会被视为是指令式编程的同义语。派生自结构化编程（Structured programming），主要采取程序调用（procedure call）或函数调用（function call）的方式来进行流程控制。流程则由包涵一系列运算步骤的程序（Procedures），例程（routines），子程序（subroutines）, 方法（methods），或函数（functions）来控制。在程序运行的任何一个时间点，都可以调用某个特定的程序。任何一个特定的程序，也能被任意一个程序或是它自己本身调用。 面向对象： &emsp;&emsp;是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象。面向对象具有三大特性：封装、继承、多态。 &emsp;&emsp;一开始的学习过程中会容易不太容易理解面向过程和面向对象的区别，简单地举一个例子来说明： 1234567891011需求：印刷一本书 办法： -雕版印刷（面向过程）：从头到尾顺序刻好每一页的内容，然后印刷 -活字印刷（面向对象）：刻好所需用的字块，根据每一页的内容来选取所需要的字块来排列组装成一块板来印刷。需求变更：在某一页增删一些内容办法： -雕版印刷（面向过程）：旧的雕版只得作废重新雕刻 -活字印刷（面向对象）：根据修改内容来选取所需要的字块来排列组装成一块板来印刷。如果有新添的没有雕刻过的字，再雕刻一份即可。 &emsp;&emsp;由上可以看出面向对象相比于面向过程的开发过程更加的灵活方便，使得代码的维护性、扩展性和复用性均有极大的提升，降低了开发的难度。 基础回顾applet&emsp;&emsp;在网页中运行的Java程序称为applet。要使用applet，需要启动Java的Web浏览器执行字节码，而不需要安装任何软件。由于兼容性问题以及安全问题，applet的使用渐渐减少。 Servlet&emsp;&emsp;Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态Web内容。","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://rocky-17.github.io/tags/学习笔记/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://rocky-17.github.io/tags/SpringMVC/"},{"name":"SSM","slug":"SSM","permalink":"https://rocky-17.github.io/tags/SSM/"}]},{"title":"Leetcode题解","slug":"Leetcode题解","date":"2019-10-16T09:35:01.590Z","updated":"2019-09-17T12:05:03.000Z","comments":true,"path":"2019/10/16/Leetcode题解/","link":"","permalink":"https://rocky-17.github.io/2019/10/16/Leetcode题解/","excerpt":"Leetcode解题思路，尽力自己每天做一题。算法优化的内容会写得很慢，因为大佬的很多题解思路需要慢慢理解才能想明白","text":"Leetcode解题思路，尽力自己每天做一题。算法优化的内容会写得很慢，因为大佬的很多题解思路需要慢慢理解才能想明白 1 两数之和 &emsp;&emsp;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。示例:给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] &emsp;&emsp;一开始就很容易想到的思路：使用双重循环，从两边向中间搜索,代码如下： 1234567891011121314class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int[] ansr = new int[2]; for(int i = 0;i &lt; nums.length - 1;i++)&#123; for (int j = nums.length - 1; j &gt; i;j--)&#123; if(nums[i] + nums[j] == target)&#123; ansr[0] = i; ansr[1] = j; &#125; &#125; &#125; return ansr; &#125;&#125; &emsp;&emsp;成功AC,时间复杂度为O(n²),空间复杂度O(1);耗时74ms，内存消耗37.2MB。耗时太多，显然对这个结果不是太满意，需要换个思路。","categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://rocky-17.github.io/tags/Leetcode/"},{"name":"刷题","slug":"刷题","permalink":"https://rocky-17.github.io/tags/刷题/"},{"name":"算法","slug":"算法","permalink":"https://rocky-17.github.io/tags/算法/"}]},{"title":"Java基础复习","slug":"Java基础复习","date":"2019-10-16T09:35:01.590Z","updated":"2019-07-28T10:09:38.000Z","comments":true,"path":"2019/10/16/Java基础复习/","link":"","permalink":"https://rocky-17.github.io/2019/10/16/Java基础复习/","excerpt":"《Java核心技术 卷一》（第十版）读书笔记","text":"《Java核心技术 卷一》（第十版）读书笔记 第一章 Java程序设计概述Java的特性简单性&emsp;&emsp;Java没有诸如C++一样的头文件、指针、结构、联合、虚基类、操作符重载一类的东西，但是C++的许多特性在Java中仍有应用。 面向对象&emsp;&emsp;面向对象设计是一种程序设计技术。它将重点放在对象与对象的接口上。Java与C++的主要不同点就在于多重继承，在Java中，取而代之的是更为简单的接口概念。 分布式&emsp;&emsp;Java有一个丰富的例程库，用于处理想HTTP和FTP之类的TCP/IP协议。Java程序能够通过URL打开和访问网络上的对象。 健壮性&emsp;&emsp;Java投入了大量的精力进行早期的问题检测，后期动态的（运行时）检测，并消除了容易出错的情况······Java和C++最大的不同在于Java采用的指针模型可以消除重写和损坏数据的可能性。 安全性&emsp;&emsp;Java适用于网络/分布式环境，在安全方面投入了很大精力，使用Java可以构建防病毒，防篡改的系统。它能够防范诸如运行时堆栈溢出、破坏自己的进程空间之外的内存、未经授权读写文件等攻击。 体系结构中立&emsp;&emsp;编译器编译源码生成与特定的计算机体系结构无关的字节码，字节码又可通过任意计算机上的解释器来执行，其还可以动态的翻译为本地机器代码。 可移植性&emsp;&emsp;在Java中，数据类型具有固定大小，这消除了代码移植时的主要问题。二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。字符串是标准的Unicode格式存储的。除了与用户界面有关的部分外，所有其他Java库都能很好的支持平台独立性。 解释型&emsp;&emsp;Jaca解释器可以在任何移植了解释器的机器上执行Java字节码。 高性能&emsp;&emsp;字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定CPU的机器码。 多线程&emsp;&emsp;多线程可以带来更好的交互响应和实时行为，Java是第一个支持并发程序设计的主流语言。 动态性&emsp;&emsp;它能够适应不断发展的环境。库中可以自由地添加新方法和实例变量，而对客户端没有任何影响。 Java applet 与 Internet&emsp;&emsp;在网页中运行的Java程序称为applet。要使用applet，需要启动Java的Web浏览器执行字节码，而不需要安装任何软件。由于兼容性问题以及安全问题，applet的使用渐渐减少。 Java发展史 版本 年份 语言新特性 类与接口数量 1.0 1996 语言本身 211 1.1 1997 内部类 477 1.2 1998 strictfp修饰符 1524 1.3 2000 无 1840 1.4 2002 断言 2723 5.0 2004 泛型类、”for each”循环、可变元参数。自动装箱、元数据、枚举、静态导入 3279 6 2006 无 3793 7 2011 基于字符串的switch、钻石操作符、二进制字面量、异常处理改进 4024 8 2014 lambda表达式、包含默认方法的接口、流和日期/时间库 4240 第二章 Java程序设计环境 术语名 缩写 解释 Java Development Kit JDK 编写Java程序使用的软件 Java Runtime Environment JRE 运行Java程序的软件 Server JRE - 在服务器上运行Java程序的软件 Standard Edition SE 用于桌面或简单服务器应用的Java平台 Enterprise Edition EE 用于复杂服务器应用的Java平台 Micro Edition ME 用于手机或其他小型设备的Java平台 Java FX - 用于图形化用户界面的一个替代工具包，在Oracle的Java SE的发布版本中提供 OpenJDK - Java SE的一个免费开源实现，不包含浏览器集成或Java FX Java 2 J2 一个过时术语，用于描述1998 ~ 2006年间的Java版本 Software Development Kit SDK 一个过时的术语，用于描述1998 ~ 2006年间的JDK Update u Oracle术语，表示bug修正版本 Netbeans - Oracle的集成开发环境 第三章 Java的基本程序结构一个简单的Java应用程序： 12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println(\"HelloWorld\"); &#125;&#125; 逐行来看一下这段代码的结构 1public class HelloWorld&#123;···&#125; &emsp;&emsp;关键字public 称为访问修饰符，访问修饰符用于控制程序的其他部分对这段代码的访问级别。&emsp;&emsp;关键字class表明这是一个类。&emsp;&emsp;Helloworld是类名 类名的命名规则很宽松，可以任意命名，但必须用字母作为开头，且不能使用Java保留字 1public static void main(String[] args)&#123;···&#125; &emsp;&emsp;main方法，Java程序的入口。根据Java语言规范，main方法必须申明为public类型 1System.out.println(\"HelloWorld\"); &emsp;&emsp;程序语句。 注释12345678// 单行注释/*多行注释*/ 数据类型Java是一种强类型语言，意味着必须为每一个变量声明一种类型。在Java中有8种基本类型： 4种整型 类型 存储需求 取值范围 byte 1 byte -128 ~ 127 short 2 bytes -32,768 ~ 32,767 int 4 bytes -2,147,483,648 ~ 2,147,483,647 long 8 bytes -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 &emsp;&emsp;长整型数值有一个后缀L或l；&emsp;&emsp;十六进制数值有一个前缀0x或0X&emsp;&emsp;八进制有一个前缀0&emsp;&emsp;从Java7开始，加上前缀0b或0B表示二进制数 2种浮点型 类型 存储需求 取值范围 float 4 bytes 大约 ±3.402,823,47E+38F（有效位数为6~7位） double 8 bytes 大约 ±1.797,693,134,862,315,70E+308（有效位数为15位） &emsp;&emsp;float类型的数值有一个后缀f或F，没有这个后缀的浮点型数值默认为double类型。&emsp;&emsp;浮点型不适用于无法接受舍入误差的计算（如金融系统）中，应该使用BigDecimal类。 用于表示溢出和出错情况的三个特殊的浮点数值 正无穷大 负无穷大 NaN（不是一个数字） 常量Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY和Double.NaN（以及相应类型的Float类型的常量分别表示这三个特殊的值） 注意：不能这样检测一个特定值是否等于Double.NaN： 1if(x == Double.NaN) // is never true 所有的“非数值”都认为是不相同的，但可以使用Double.isNaN方法检测 1if(Double.isNaN(x)) // check whether x is \"not a number\" 1种字符类型&emsp;&emsp;char类型的字面常量要用单引号括起来。&emsp;&emsp;char类型的值可以表示为十六进制，其范围从\\u0000到\\Uffff。&emsp;&emsp;Unicode转义序列会在解析代码前得到处理。如： 1\"\\u0022+\\u0022\" &emsp;&emsp;并不是一个由””引起来的字符串，而会转义为 1\"\"+\"\" //一个空串 &emsp;&emsp;特别的，要小心注释中的\\u。如： 1// \\u00A0 is a newline &emsp;&emsp;其中\\u00A0会被认为是一个换行符，而不是单纯的注释文字。 一些特殊的转义序列： 转义序列 名称 Unicode值 \\b 退格 \\u0008 \\t 制表 \\u0009 \\n 换行 \\u000a \\r 回车 \\u000d \\\" 双引号 \\u0022 \\' 单引号 \\u0027 \\\\ 反斜杠 \\u005c 1种布尔类型&emsp;&emsp;boolean类型有两个值，false和true，用来判断逻辑条件。整型和布尔值之间不能进行相互转换。 变量变量声明&emsp;&emsp;变量名大小写敏感。&emsp;&emsp;不可使用Java保留字作为变量名。&emsp;&emsp;变量的声明应尽可能靠近第一次使用该变量的地方。&emsp;&emsp;变量声明有许多的约定俗成的规范，相关资料可以参考《阿里巴巴Java开发手册》一类的资料，不再赘述。 常量&emsp;&emsp;在Java中，使用关键字final指示常量。关键字final表示这个变量只能被赋值一次，一旦被赋值，便不能再被更改。&emsp;&emsp;习惯上常量名使用全大写。&emsp;&emsp;如果希望某个常量能在一个类中被多个方法使用，那么可以使用static final设置一个类常量。 运算符 运算符 操作 + 加 - 减 * 乘 / 除 % 取模 数值类型之间的转换 数据类型之间的合法转换 &emsp;&emsp;实箭头：无信息丢失的转换。&emsp;&emsp;虚箭头：可能有精度损失的转换。 强制类型转换&emsp;&emsp;","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://rocky-17.github.io/tags/学习笔记/"},{"name":"Java","slug":"Java","permalink":"https://rocky-17.github.io/tags/Java/"}]},{"title":"软件安装配置","slug":"17届企业课环境配置教程","date":"2019-10-16T09:35:01.575Z","updated":"2019-10-04T12:08:43.955Z","comments":true,"path":"2019/10/16/17届企业课环境配置教程/","link":"","permalink":"https://rocky-17.github.io/2019/10/16/17届企业课环境配置教程/","excerpt":"TJNU软件工程17级中软国际企业课环境配置教程","text":"TJNU软件工程17级中软国际企业课环境配置教程 Java框架技术Tomcat安装1.Tomcat的官网地址为http://tomcat.apache.org/ 选择自己所需要的版本 2.这里以9.0版本为例，选择符合自己电脑位数的版本下载 3.下载之后，将其解压到自己指定的路径，启动/bin/startup.bat，打开浏览器输入localhost:8080,出现以下界面，安装即算完成。 4.在第3步一般会看见控制台出现中文乱码如下图所示,这是由于控制台是默认GBK编码而Tomacat默认输出的是UTF-8的中文字符，所以出现乱码。在控制台按Ctrl+C退出Tomcat。 5.用记事本打开/conf/logging.properties，将所有的encoding=UTF-8改为encoding=GBK即可。再次打开/bin/startup.bat，乱码消失。 IntelliJ IDEA Ultimate版安装&emsp;&emsp;开发使用的ide有两款可以选择：eclipse和IDEA.由于个人更喜欢IDEA的语法提示以及它的一些插件支持，再加上本人有IDEA的Ultimate版本的license，所以选择IDEA作为主要使用的IDE。如果没有IDEA Ultimate版本license的可以使用校园邮箱去申请，或者使用eclipse。 IDEA的官网地址为http://www.jetbrains.com/idea/download/#section=windows 下载安装没有任何难度，无脑下一步就行。 JDK安装&emsp;&emsp;如果电脑上没有JDK，可以使用微软的VS Code Java Pack Installer工具一键安装配置，省去自己配置path等路径的麻烦。不过这个工具一键安装的是最新版本的JDK，如果需要以往旧版本的JDK，还需要自己去Oracel的官网下载安装，不赘诉。 大数据开发基础VirtualBox安装1.VirtualBox的官方下载地址为https://www.virtualbox.org/wiki/Downloads 自行选择合适的版本下载。 2.安装过程： 如果需要，自行修改安装路径 如果需要，自行修改安装路径","categories":[],"tags":[{"name":"软件安装","slug":"软件安装","permalink":"https://rocky-17.github.io/tags/软件安装/"},{"name":"配置","slug":"配置","permalink":"https://rocky-17.github.io/tags/配置/"}]}]}